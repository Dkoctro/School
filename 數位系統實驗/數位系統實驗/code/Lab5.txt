Lab5_1

module showNum(out1,out2,out3);

output wire [6:0]out1,out2,out3;
    
assign out1=7'b0110000;
assign out2=7'b1000000;
assign out3=7'b0000000;
    
endmodule

Lab5_2

module seven(in1,in2,out);

input [2:0] in1,in2;
output reg [6:0]out;
reg [3:0]num;

always@(*)
begin

num=in1+in2;

case(num)
    4'b0000: out=7'b1000000;//0
    4'b0001: out=7'b1111001;//1
    4'b0010: out=7'b0100100;//2
    4'b0011: out=7'b0110000;//3
    4'b0100: out=7'b0011001;//4
    4'b0101: out=7'b0010010;//5
    4'b0110: out=7'b0000010;//6
    4'b0111: out=7'b1111000;//7
    4'b1000: out=7'b0000000;//8
    4'b1001: out=7'b0010000;//9
    4'b1010: out=7'b0001000;//a
    4'b1011: out=7'b0000011;//b
    4'b1100: out=7'b1000110;//c
    4'b1101: out=7'b0100001;//d
    4'b1110: out=7'b0000110;//e
    4'b1111: out=7'b0001110;//f
endcase
end
endmodule

ç·´ç¿’

module special_multiplier(num, result);
    
input  [3:0]  num;
output reg [6:0]  result;
reg     [3:0]   special;
    
always@(*)
begin 
    if(num==0|num==1|num==2)special=num;
    else if(num==3|num==4|num==5)special=(num+1)*2;
    else if(num==6|num==7)special=(num-1)*2;
    else special=0;
    case(specail)
        4'b0000: result=7'b1000000;
        4'b0001: result=7'b1111001;
        4'b0010: result=7'b0100100;
        4'b0011: result=7'b0110000;
        4'b0100: result=7'b0011001;
        4'b0101: result=7'b0010010;
        4'b0110: result=7'b0000010;
        4'b0111: result=7'b1111000;
        4'b1000: result=7'b0000000;
        4'b1001: result=7'b0010000;
        4'b1010: result=7'b0001000;
        4'b1011: result=7'b0000011;
        4'b1100: result=7'b1000110;
        4'b1101: result=7'b0100001;
        4'b1110: result=7'b0000110;
        4'b1111: result=7'b0001110;
    endcase
        
    
end
    
endmodule