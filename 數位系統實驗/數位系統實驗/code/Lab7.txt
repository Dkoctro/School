Lab7

module MooreMachine(clk,reset,out,in);

input reset,in,clk;
wire div_clk;
reg [3:0] tmp;
output [6:0] out;
reg [2:0]state;
    
clk_div(.clk(clk),.rst(reset),.div_clk(div_clk));
seven(.in(tmp),.out(out));
    
always@(posedge div_clk or negedge reset)
begin 
    if(reset == 1'b0)
	begin
        state=3'b000;
		  tmp=4'b0000;
	end
    
    else 
    begin
        case(state)
            3'b000://0
			begin
				tmp=4'b0000;
                if(in==0)
                    state=3'b001;
                else 
                    state=3'b011;
			end
            3'b001://1
			begin
				tmp=4'b0001;
                if(in==0)
                    state=3'b010;
                else 
                    state=3'b101;
            end
			3'b010://2
            begin
				tmp=4'b0010;
                if(in==0)
                    state=3'b011;
                else 
                    state=3'b000;
            end
			3'b011://3
            begin
				tmp=4'b0011;
                if(in==0)
                    state=3'b100;
                else 
                    state=3'b001;
            end
			3'b100://4
            begin
				tmp=4'b0100;
                if(in==0)
                    state=3'b101;
                else 
                    state=3'b010;
            end
			3'b101://5
            begin
				tmp=4'b0101;
                if(in==0)
                    state=3'b000;
                else 
                    state=3'b100;
			end
	    endcase
    end
end

endmodule
    
/////我是分隔線/////
    
`define TimeExpire 32'd25000000  

module clk_div(clk, rst, div_clk);
    
input clk, rst;
output reg div_clk;
reg [31:0]count;

always@(posedge clk or negedge rst)
begin
    if(!rst)
    begin
        count <= 32'd0;
        div_clk <= 1'b0;
    end
    else begin
        if(count == `TimeExpire)
        begin
            count <= 32'd0;
            div_clk <= ~div_clk;//變成1並輸出
        end
        else
            count <= count + 32'd1;
    end
end

endmodule

/////我是分隔線/////

module seven(in, out);

input [3:0] in;
output reg [6:0] out;

always@(*)
begin
    case(in)
        4'b0000: out=7'b1000000;//0
        4'b0001: out=7'b1111001;//1
        4'b0010: out=7'b0100100;//2
        4'b0011: out=7'b0110000;//3
        4'b0100: out=7'b0011001;//4
        4'b0101: out=7'b0010010;//5
        4'b0110: out=7'b0000010;//6
        4'b0111: out=7'b1111000;//7
        4'b1000: out=7'b0000000;//8
        4'b1001: out=7'b0010000;//9
        4'b1010: out=7'b0001000;//a
        4'b1011: out=7'b0000011;//b
        4'b1100: out=7'b1000110;//c
        4'b1101: out=7'b0100001;//d
        4'b1110: out=7'b0000110;//e
        4'b1111: out=7'b0001110;//f
    endcase
end
    
endmodule